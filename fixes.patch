diff --git a/tamalero/ETROC.py b/tamalero/ETROC.py
index 807c585..e173cf5 100644
--- a/tamalero/ETROC.py
+++ b/tamalero/ETROC.py
@@ -296,6 +296,8 @@ class ETROC():
             self.wr_reg("asyResetGlobalReadout", 0)
             time.sleep(0.1)
             self.wr_reg("asyResetGlobalReadout", 1)
+        if not self.isfake:
+            self.rb.rerun_bitslip()  # NOTE this is necessary to get the links to lock again
 
     def read_Vref(self):
         return self.rb.SCA.read_adc(self.vref_pin)
diff --git a/tamalero/ReadoutBoard.py b/tamalero/ReadoutBoard.py
index 5ddfb70..401afdb 100644
--- a/tamalero/ReadoutBoard.py
+++ b/tamalero/ReadoutBoard.py
@@ -539,14 +539,16 @@ class ReadoutBoard:
 
     def enable_etroc_readout(self, only=None, slave=False):
         if slave:
-            if only:
+            if only is not None:
                 disabled = self.kcu.read_node(f"READOUT_BOARD_{self.rb}.ETROC_DISABLE_SLAVE").value()
                 self.kcu.write_node(f"READOUT_BOARD_{self.rb}.ETROC_DISABLE_SLAVE", disabled ^ (1 << only))
             else:
                 self.kcu.write_node(f"READOUT_BOARD_{self.rb}.ETROC_DISABLE_SLAVE", 0)
         else:
-            if only:
+            if only is not None:
                 disabled = self.kcu.read_node(f"READOUT_BOARD_{self.rb}.ETROC_DISABLE").value()
+                #print(bin(disabled))
+                #print(bin(disabled ^ (1 << only)))
                 self.kcu.write_node(f"READOUT_BOARD_{self.rb}.ETROC_DISABLE", disabled ^ (1 << only))
             else:
                 self.kcu.write_node(f"READOUT_BOARD_{self.rb}.ETROC_DISABLE", 0)
@@ -601,3 +603,14 @@ class ReadoutBoard:
                 print("Filler rate is low. Try resetting PLL and FC of the ETROC.")
 
         return locked & (filler_rate > expected_filler_rate) & (error_count < 1)
+
+    def enable_bitslip(self):
+        self.kcu.write_node("READOUT_BOARD_%s.BITSLIP_AUTO_EN"%self.rb, 0x1)
+
+    def disable_bitslip(self):
+        self.kcu.write_node("READOUT_BOARD_%s.BITSLIP_AUTO_EN"%self.rb, 0x0)
+
+    def rerun_bitslip(self):
+        self.enable_bitslip()
+        sleep(0.01)
+        self.disable_bitslip()
diff --git a/test_ETROC.py b/test_ETROC.py
index 605a7cf..f701049 100644
--- a/test_ETROC.py
+++ b/test_ETROC.py
@@ -339,7 +339,7 @@ if __name__ == '__main__':
         df = DataFrame()
         # NOTE this is for single port tests right now, where we only get elink 2
         fifo = FIFO(rb=rb_0)
-        fifo.select_elink(2)
+        fifo.select_elink(0)
         fifo.ready()
 
         print("\n - Checking elinks")
@@ -355,8 +355,11 @@ if __name__ == '__main__':
                 slave = True
             for link in etroc.elinks[lpgbt]:
                 rb_0.enable_etroc_readout(link, slave=slave)
+                #time.sleep(0.1)
+                #rb_0.reset_data_error_count()
+                rb_0.rerun_bitslip()
+                time.sleep(1.5)
                 rb_0.reset_data_error_count()
-                time.sleep(0.5)
                 stat = rb_0.get_link_status(link, slave=slave, verbose=False)
                 if stat:
                     rb_0.get_link_status(link, slave=slave)
@@ -364,8 +367,11 @@ if __name__ == '__main__':
                 while not stat:
                     #rb_0.disable_etroc_readout(link, slave=slave)
                     rb_0.enable_etroc_readout(link, slave=slave)
+                    #time.sleep(0.1)
+                    #rb_0.reset_data_error_count()
+                    rb_0.rerun_bitslip()
+                    time.sleep(1.5)
                     rb_0.reset_data_error_count()
-                    time.sleep(0.5)
                     stat = rb_0.get_link_status(link, slave=slave, verbose=False
                                                 )
                     if stat:
diff --git a/test_tamalero.py b/test_tamalero.py
index 8b9fc2a..64f3ea2 100644
--- a/test_tamalero.py
+++ b/test_tamalero.py
@@ -285,7 +285,7 @@ if __name__ == '__main__':
     #-------------------------------------------------------------------------------
 
     modules = []
-    if args.configuration == 'emulator' or args.configuration == 'modulev0':
+    if args.configuration == 'emulator' or args.configuration.count('modulev0'):
         print("Configuring ETROCs")
         for i in range(res['n_module']):
             modules.append(Module(rb, i+1))
